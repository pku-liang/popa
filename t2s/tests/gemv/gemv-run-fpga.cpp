/*******************************************************************************
* Copyright 2021 Intel Corporation
*
* Licensed under the BSD-2-Clause Plus Patent License (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* https://opensource.org/licenses/BSDplusPatent
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions
* and limitations under the License.
*
*
* SPDX-License-Identifier: BSD-2-Clause-Patent
*******************************************************************************/
// The header file generated by gemv.cpp
#include "gemv-interface.h"

// Constant parameters (inner loop bounds) of the design
#include "const-parameters.h"

// Outer loop bounds for testing
#ifdef TINY // For verifying correctness only
    #define K           4
    #define I           4
#else
    #define K           32
    #define I           8
#endif

// Roofline utilities
#include "Roofline.h"

// The only header file needed for including T2S.
#include "HalideBuffer.h"

// For printing output
#include <stdio.h>
#include <iostream>

// For validation of results.
#include <assert.h>

using namespace std;

int main()
{
    const int TOTAL_I = VI * III * II * I;
    const int TOTAL_K = KK * K;

    Halide::Runtime::Buffer<float> a(TOTAL_I, TOTAL_K), x(TOTAL_K);

    for (size_t i = 0; i < TOTAL_I; i++) {
        for (size_t k = 0; k < TOTAL_K; k++) {
            a(i, k) = random();
        }
    }

    for (size_t k = 0; k < TOTAL_K; k++) {
        x(k) = random();
    }

    Halide::Runtime::Buffer<float> y(VI, III, II, I);
    gemv(a, x, y);

#ifdef TINY
    for (int i = 0; i < I; i++)
      for (int ii = 0; ii < II; ii++)
        for (int iii = 0; iii < III; iii++)
          for (int vi = 0; vi < VI; vi++) {
            size_t total_i = vi + VI*iii + VI*III*ii + VI*III*II*i;
            float golden = 0;
            for (int k = 0; k < TOTAL_K; k++) {
                golden += a(total_i, k) * x(k);
            }
            assert(fabs(golden - y(vi, iii, ii, i)) < 0.005*fabs(golden));
        }
#else
    // Report performance. DSPs, FMax and ExecTime are automatically figured out from the static analysis
    // during FPGA synthesis and and the dynamic profile during the FGPA execution.
    float mem_bandwidth = 34; // pac_a10 on DevCloud has 34GB/s memory bandwidth
    float compute_roof = 2 * DSPs() * FMax();
    float number_ops = 2 * (float)(VI * III * II * I) * (float)(KK * K); // Total operations (GFLOP for GEMV), independent of designs
    float number_bytes = (float)(VI * III) * (float)(KK * II) * (float)(K * I) * 4 +
                         (float)(KK * K) * 4 +
                         (float)(VI * III * II * I) * 4;
    float exec_time= ExecTime();
    roofline(mem_bandwidth, compute_roof, number_ops, number_bytes,exec_time);
    if (fopen("roofline.png", "r") == NULL) {
        cout << "Failed to draw roofline!\n";
        return 1;
    }
#endif

    printf("Success\n");
    return 0;
}
