/*******************************************************************************
* Copyright 2021 Intel Corporation
*
* Licensed under the BSD-2-Clause Plus Patent License (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* https://opensource.org/licenses/BSDplusPatent
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions
* and limitations under the License.
*
*
* SPDX-License-Identifier: BSD-2-Clause-Patent
*******************************************************************************/
// The header file generated by gbmv.cpp
#include "gbmv-interface.h"

// Constant parameters (inner loop bounds) of the design
#include "const-parameters.h"

// Outer loop bounds for testing
#ifdef TINY
    #define K           2
    #define Ku          15
    #define Kl          15
#else
    #define K           4
    #define Ku          2047
    #define Kl          2047
#endif

// Roofline utilities
#include "Roofline.h"

// The only header file needed for including T2S.
#include "HalideBuffer.h"

// For printing output
#include <stdio.h>
#include <iostream>

// For validation of results.
#include <assert.h>

using namespace std;

int main()
{
    const int TOTAL_K = KKK * KK * K;

    Halide::Runtime::Buffer<float> A(TOTAL_K, TOTAL_K), X(TOTAL_K);
    for (int i = 0; i < TOTAL_K; i++) {
        for (int k = 0; k < TOTAL_K; k++) {
            if (k - i > Ku || i - k > Kl) continue;
            A(k, i) = random();
        }
    }
    for (int k = 0; k < TOTAL_K; k++) {
        X(k) = random();
    }

    int TOTAL_I = ((Ku + Kl + 1 + (VI * III - 1)) / (VI * III)) * (VI * III);
    int I = TOTAL_I / (VI * III);
    Halide::Runtime::Buffer<float> bandedA(TOTAL_I, TOTAL_K);
    for (int k = 0; k < TOTAL_K; k++) {
        int j = Ku - k;
        for (int i = max(0, k-Ku); i < min(TOTAL_K, k+Kl+1); i++) {
            bandedA(i+j, k) = A(k, i);
        }
    }
    Halide::Runtime::Buffer<float> O(VI*III+KKK-1, II, KK, I, K);
    gbmv(bandedA, X, O);

#ifdef TINY
    // Validate the results
    Halide::Runtime::Buffer<float> golden(TOTAL_K), result(TOTAL_I + TOTAL_K - 1);
    for (int i = 0; i < TOTAL_K; i++) {
        golden(i) = 0;
        for (int k = 0; k < TOTAL_K; k++) {
            golden(i) += A(k, i)*X(k);
        }
    }
    for (int flat_dim = 0; flat_dim < TOTAL_I + TOTAL_K - 1; flat_dim++) {
        result(flat_dim) = 0;
    }
    for (int k = 0; k < K; k++)
      for (int i = 0; i < I; i++)
        for (int kk = 0; kk < KK; kk++)
          for (int ii = 0; ii < II; ii++)
            for (int flat_dim = 0; flat_dim < VI*III+KKK-1; flat_dim++) {
                int total_i = VI*III*ii + VI*III*II*i;
                int total_k = KKK*kk + KKK*KK*k;
                result(total_i + total_k + flat_dim) += O(flat_dim, ii, kk, i, k);
            }
    for (int k = 0; k < TOTAL_K; k++) {
        float delta = golden(k) - result(k + Ku);
        assert(fabs(delta) < 0.005*fabs(golden(k)));
    }
#else
    // Report performance. DSPs, FMax and ExecTime are automatically figured out from the static analysis
    // during FPGA synthesis and and the dynamic profile during the FGPA execution.
#ifdef S10
    double mem_bandwidth = 75;
#else
    double mem_bandwidth = 33;
#endif
    double compute_roof = 2 * DSPs() * FMax();
    double number_ops   = 2 * (double)(TOTAL_I * TOTAL_K); // Total operations (GFLOP for GBMV), independent of designs
    double number_bytes = 4 * (double)(TOTAL_I * TOTAL_K) +
                          4 * (double)(TOTAL_K) +
                          4 * (double)(KKK*II*KK*I*K) +
                          4 * (double)(VI*III*II*KK*I*K);
    double exec_time = ExecTime("kernel_DTopOut");
    roofline(mem_bandwidth, compute_roof, number_ops, number_bytes, exec_time);
    if (fopen("roofline.png", "r") == NULL) {
        cout << "Failed to draw roofline!\n";
        return 1;
    }
#endif

    printf("Success\n");
    return 0;
}
